name: Deploy to AWS Lambda

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install Serverless Framework
        run: npm install -g serverless@3.38.0

      - name: Install Serverless plugins
        run: |
          if [ -f package.json ]; then
            npm install
          else
            echo "No package.json found, skipping npm install"
          fi

      - name: Set deployment stage
        id: set-stage
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "stage=dev" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "stage=dev" >> $GITHUB_OUTPUT
          else
            echo "stage=dev" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to AWS Lambda
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_ALGORITHM: ${{ secrets.JWT_ALGORITHM }}
          ACCESS_TOKEN_MINUTES: ${{ secrets.ACCESS_TOKEN_MINUTES }}
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
          TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
          TWILIO_PHONE_NUMBER: ${{ secrets.TWILIO_PHONE_NUMBER }}
        run: |
          export MONGO_URI="${MONGO_URI}"
          export DATABASE_NAME="${DATABASE_NAME}"
          export JWT_SECRET="${JWT_SECRET}"
          export JWT_ALGORITHM="${JWT_ALGORITHM}"
          export ACCESS_TOKEN_MINUTES="${ACCESS_TOKEN_MINUTES}"
          export SMTP_SERVER="${SMTP_SERVER}"
          export SMTP_PORT="${SMTP_PORT}"
          export SMTP_USERNAME="${SMTP_USERNAME}"
          export SMTP_PASSWORD="${SMTP_PASSWORD}"
          export FROM_EMAIL="${FROM_EMAIL}"
          export TWILIO_ACCOUNT_SID="${TWILIO_ACCOUNT_SID}"
          export TWILIO_AUTH_TOKEN="${TWILIO_AUTH_TOKEN}"
          export TWILIO_PHONE_NUMBER="${TWILIO_PHONE_NUMBER}"
          serverless deploy --stage ${{ steps.set-stage.outputs.stage }} --verbose

      - name: Display deployment info
        if: success()
        run: |
          echo "✅ Deployment successful!"
          echo "Stage: ${{ steps.set-stage.outputs.stage }}"
          echo "Region: ${{ env.AWS_REGION }}"
          serverless info --stage ${{ steps.set-stage.outputs.stage }}

      - name: Deployment failure notification
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "Please check the logs above for more details."